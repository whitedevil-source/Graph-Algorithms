//Disjoint Set Union
/*
* O(alpha(n)) time complexity
* alpha(n): Inverse Ackermann function
* Solve the problem of long chains
* 
void make(int v){
    parent[v]=v;
    size[v]=1;
}
void union_sets(int a ,int b){
    a=find_set(a)
    b=find_set(b)
    if(a!=b){
        if(size[a]<size[b])
            swap(a,b);
        parent[b]=a;
        size[a]+=size[b];
    }
}
*/

//Cycle Detection in Undirected graph using DSU

const int N = 1e5 + 6;
vi parent(N);
vi sz1(N);
void make_set(int v) {
    parent[v] = v;
    sz1[v] = 1;
}
int find_set(int v) {
    if (v == parent[v]) return v;
    return parent[v] = find_set(parent[v]); //PATH compression
}
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (sz1[a] < sz1[b]) swap(a, b);
        parent[b] = a;
        sz1[a] += sz1[b];
    }
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    rep(i, N) {
        make_set(i);
    }
    int n, m; cin >> n >> m;
    vector<pii> edges;
    rep(i, m) {
        int u, v; cin >> u >> v;
        edges.push_back({ u,v });
    }
    bool cycle = false;
    for (auto i : edges) {
        int u = i.first; int v = i.second;
        int x = find_set(u); int y = find_set(v);
        if (x == y) {
            cycle = true;
        }
        else {
            union_sets(u, v);
        }
    }
    if (cycle) cout << "cycle present";
    else cout << "cycle not present";

    return 0;
}
