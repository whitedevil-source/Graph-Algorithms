/*Snakes and Ladders:
* You are at square 1 and have to reach square 100.
* You have complete control over the die and can get
* any number from 1-6 of your choice. 
* Find min steps to reach
* You will be given the ladder and snake indices
*/
/* IDEA:
* BFS:
* Push 1 into the queue,
*   For all possibilities:
*       check if next position is ladder, snake or empty
*       mark the square as visited and push into queue
* Stop the traversal when you reached 100
*/


const int inf = 1e9;
#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    int ladders, snakes;
    cin >> ladders;
    map<int, int> lad;
    map<int, int> snak;
    rep(i, ladders) {
        int u, v; cin >> u >> v;
        lad[u] = v;
    }
    cin >> snakes;
    rep(i, snakes) {
        int u, v; cin >> u >> v;
        snak[u] = v;
    }
    int moves = 0;
    queue<int> q;
    q.push(1);
    bool found = false;
    vi vis(101, 0);
    vis[1] = 1;
    while (!q.empty() && !found) {
        int sz = q.size();
        while (sz--) {
            int t = q.front();
            q.pop();
            for (int die = 1; die <= 6; die++) {
                if (t + die == 100) found = true;
                if (t + die <= 100 && lad[t + die] && !vis[lad[t + die]]) {
                    vis[lad[t + die]] = true;
                    if (lad[t + die] == 100) found = true;
                    q.push(lad[t + die]);
                }
                else if (t + die <= 100 && snak[t + die] && !vis[snak[t + die]]) {
                    vis[snak[t + die]] = true;
                    if (snak[t + die] == 100) found = true;
                    q.push(snak[t + die]);
                }
                else if (t + die <= 100 && !vis[t + die] && !snak[t + die] && !lad[t + die]) {
                    vis[t + die] = true;
                    q.push(t + die);
                }
            }
        }
        moves++;
    }
    if (found) cout << moves;

    return 0;
}
