/* Cycle detection in Directed Graph
1. Mark the current node as visited ans also mark the index in recursion stack
2. Find all vertices which are not visited and are adjacent to the current node
3. If the adjacent vertices are already marked in the recursion stack then a cycle is found.
*/

bool iscycle(int src, vector<vector<int>>& adj, vector<bool>& visited, vi& stack) {
    stack[src] = true;
    if (!visited[src]) {
        visited[src] = true;
        for (auto i : adj[src]) {
            if (!visited[i] && iscycle(i, adj, visited, stack)) return true;
            if (stack[i]) return true;
        }
    }
    stack[src] = false;
    return false;
}


#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

    int n, m; cin >> n >> m;
    vector<vi> adj(n);
    rep(i, m) {
        int u, v; cin >> u >> v;
        adj[u].push_back(v);
    }
    bool cycle = false;
    vi stack(n, 0);
    vector<bool> visited(n, 0);

    if (cycle) cout << "cycle present";
    else cout << "cycle not present";

    return 0;
}
