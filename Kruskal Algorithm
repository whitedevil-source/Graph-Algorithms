/* Spanning Tree:
* Given an undirected and connected graph G(V,E), a spanning tree
  of the graph G is a tree that spans G (i.e, it includes every vertex of G)
  and is a subgraph of G (every edge in tree belongs to G)

  The cost of the spanning tree is the sum of the weights of 
  all the edges in the tree. There can be many spanning trees.

  Minimum spanning tree is the spanning tree where the cost is
  minimum among all spanning trees.
  There can also be many minimum spanning trees.
*/

//Kruskal Algorithm:
/*Pseudocode
* Sort the edges in increasing order of their weights.
* Iterate in the sorted edges,
    if inclusion of i'th edge leads to a cycle, then skip this edge
    else include the edge in the MST

    Complexity Analysis:
    time complexity: O(E log V)
    space complexity: O(E+V)
*/

const int N = 1e5 + 6;
vi parent(N);
vi sz1(N);
void make_set(int v) {
    parent[v] = v;
    sz1[v] = 1;
}
int find_set(int v) {
    if (v == parent[v]) return v;
    return parent[v] = find_set(parent[v]); //PATH compression
}
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (sz1[a] < sz1[b]) swap(a, b);
        parent[b] = a;
        sz1[a] += sz1[b];
    }
}


#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    rep(i, N) make_set(i);
    int n, m; cin >> n >> m;
    vector<vi> edges;
    rep(i, m) {
        int u, v, w; cin >> u >> v >> w;
        edges.push_back({ w,u,v });
    }
    sort(edges.begin(), edges.end());
    int cost = 0;
    for (auto i : edges) {
        int w = i[0];
        int u = i[1];
        int v = i[2];
        int x = find_set(u);
        int y = find_set(v);
        if (x == y) continue;
        else {
            cout << u << " " << v;
            cost += w;
            union_sets(u, v);
        }
    }
    cout << cost;

    return 0;
}
