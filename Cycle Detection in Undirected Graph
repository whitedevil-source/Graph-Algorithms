/*Cycle detection in an undirected graph
Keep traversing the graph.
If you found an edge pointing to an already visited node
(except parent node) , a cycle is found. [BACK EDGE]
*/

bool iscycle(int src, vector<vi>& adj, vector<bool>& visited, int parent) {
    visited[src] = true;
    for (auto i : adj[src]) {
        if (i != parent) {
            if (visited[i]) return true;
            if (!visited[i] and iscycle(i, adj, visited, src)) return true;
        }
    }
    return false;
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);

    int n, m; cin >> n >> m;
    vector<vi> adj(n);
    rep(i, m) {
        int u, v; cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bool cycle = false;
    vector<bool> visited(n, false);
    rep(i, n) {
        if (!visited[i] && iscycle(i, adj, visited, -1)) {
            cycle = true;
        }
    }
    if (cycle) cout << "cycle present";
    else cout << "cycle not present";

    return 0;
}
