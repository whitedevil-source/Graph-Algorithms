
/*Djikstra's Algorithm
  Given a weighted graph, find the single source shortest path
  from vertex u to all the vertices in the graph. If the node is
  unreachable print -1.
  Note: edge weights must be positive
*/
/* IDEA
* Assign a distance value to all vertices in input graph.
* Initialize all distance values as INFINITE.
* Assign distance value as 0 for source vertex
* While set is not empty
*    A.Pick a vertex from set s that has minimim distance value
*    B.Update distance value of all adjacent vertices of u
*/

const int inf = 1e7;
#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    int n, m; cin >> n >> m;
    vi dist(n + 1, inf);
    vector<vector<pii>> graph(n + 1);
    for (int i = 0; i < m; i++) {
        int u, v, w; cin >> u >> v >> w;
        graph[u].push_back({ v,w });
        graph[v].push_back({ u,w });
    }
    int source; cin >> source;
    dist[source] = 0;
    set<pii> s;

    s.insert({ 0,source });
    while (!s.empty()) {
        auto x = *(s.begin());
        s.erase(x);
        for (auto it : graph[x.second]) {
            if(dist[it.first]>dist[x.second]+it.second){
                s.erase({ dist[it.first],it.first });
                dist[it.first] = dist[x.second] + it.second;
                s.insert({ dist[it.first],it.first });
            }
        }
    }
    for (int i = 1; i <= n; i++) {
        if (dist[i] < inf) cout << dist[i] << " ";
    }

    return 0;
}
