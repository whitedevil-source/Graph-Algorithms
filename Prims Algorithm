//Prims Algorithm (Greedy approach to MST)
/* Idea:
* Select an arbitrary vertex s to start the tree from.
* While (there are still nontree vertices)
*       select the edge of minimum weight between a
*       tree and nontree vertex.
*       Add the selected edge and vertex to the tree
*/

int n, m;
const int N = 1e5 + 3;
vector<vi> g[N];
int cost = 0;
vi dist(N), parent(N);
vector<bool> vis(N);
const int INF = 1e9;

void primsMST(int source) {
    for (int i = 1; i < n; i++) {
        dist[i] = INF;
    }
    set<vi> s;
    dist[source] = 0;
    s.insert({ 0,source });
    //{wt,vertex}
    while (!s.empty()) {
        auto x = *(s.begin());
        s.erase(x);
        vis[x[1]] = true;
        int u = x[1];
        int v = parent[x[1]];
        int w = x[0];
        cout << u << " " << v << " " << w << endl;
        cost += w;
        for (auto it : g[x[1]]) {
            if (vis[it[0]]) continue;
            if (dist[it[0]] > it[1]) {
                s.erase({ dist[it[0]],it[0] });
                dist[it[0]] = it[1];
                s.insert({ dist[it[0]],it[0] });
                parent[it[0]] = x[1];
            }
        }
    }
}


#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    cin >> n >> m;
    rep(i, m) {
        int u, v, w;
        cin >> u >> v >> w;
        g[u].push_back({ v,w });
        g[v].push_back({ u,w });
    }
    primsMST(0);

    return 0;
}
